" lose vi compatibility
set nocompatible

" use ~/.vim for windows too
if (has('win16') || has('win32') || has('win64'))
  set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after
endif

" load the plugins
silent! source $HOME/.vim/etc/plugs.vim

" turn on syntax highlighting
syntax on

" change to the correct indention and plugins dependent on the file type
filetype on
filetype indent on
filetype plugin on

" turn on line numbers
set number

" no bells
set novisualbell
set noerrorbells

" tab settings
set autoindent
set smartindent
set smarttab
set expandtab

set shiftwidth=2
set softtabstop=2
set tabstop=2

" allow for cursor beyond last character.
set virtualedit=onemore

" store more history
set history=1000

" configure wildignore
set wildignore+=*/tmp/*,*.so,*.gz,*.swp,*.bak,*.pyc,*.class

" when we turn on set list, we want to see these types of whitespace:
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

" smart case-sensitive searching
set ignorecase
set smartcase

" auto-load files changed outside of vim
set autoread

" highlight all search pattern matches
set hlsearch

" persistent undo
if has('persistent_undo')
  set undodir=$HOME/.vim/undo/
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

" put swap files in one location
set directory=$HOME/.vim/swap/

" put all the backup files in one location
set backup
set writebackup
set backupdir-=.
set backupdir=$HOME/.vim/backup/

" put the viminfo file in ~/.vim
set viminfo+=n$HOME/.vim/.viminfo

" configure a custom spellfile
set spellfile=$HOME/.vim-spell-en.utf-8.add

" configure wildmode completion
set wildmode=longest,list:longest

" set the tags location
set tags+=./.git/tags

" set up file specific settings
augroup file_specific_settings
  autocmd!
  autocmd FileType markdown setlocal spell
  autocmd FileType gitcommit setlocal spell
augroup END

" disable automatic commenting
autocmd FileType * setlocal formatoptions-=cro
set formatoptions-=cro

" remap ESC
inoremap <silent> jj <ESC>
inoremap <silent> kk <ESC>

" minimize the ESC delay
set timeoutlen=1000
set ttimeoutlen=0

" readline abilities in command mode
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-d> <Del>

" wrapped lines go to next row not next line in file
noremap <silent> j gj
noremap <silent> k gk

" quick command mode
nnoremap <space> :

" remap the leader key
let mapleader=','

" use \ to repeat find backwards
nnoremap <silent> \ ,

" set up extra whitespace detection and stripping
nnoremap <silent> <leader>sw :StripWhitespace<CR>

" indent the whole file and return to the current line
nnoremap <silent> <leader>i gg=G''

" add a fast mapping to the last buffer command
nnoremap <silent> <leader>. <C-^>

" CtrlP shortcuts and settings
nnoremap <silent> <leader>p :CtrlP<CR>
nnoremap <silent> <leader>P :CtrlPTag<CR>
nnoremap <silent> <leader>b :CtrlPBuffer<CR>

" Incremental search settings
let g:incsearch#auto_nohlsearch = 1
let g:incsearch#consistent_n_direction = 1
let g:incsearch#magic = '\v'

" Incremental search mappings
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)zz
map N  <Plug>(incsearch-nohl-N)zz
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" set up quick searching ag/ack
if executable('ag')
  " use ag instead of grep
  set grepprg=ag\ --nogroup\ --nocolor

  " use ag for CtrlP
  let g:ctrlp_user_command='ag %s -l --nocolor -g ""'

  " ag is fast enough that we don't need the CtrlP cache
  let g:ctrlp_use_caching=0

  " settings
  nnoremap <leader>a :Ag!<space>
  let g:ag_highlight=1

elseif executable('ack')
  " use ack instead of grep
  set grepprg=ack\ --nocolor
  " settings
  nnoremap <leader>a :Ack!<space>
  let g:ackhighlight=1
endif

" clear highlighting and redraw the screen
nnoremap <silent> <leader>l :redraw!<CR>:nohl<CR><ESC>

" faster mapping for omni-completion
inoremap <silent> <S-Tab> <C-x><C-o>

" quickly write
nnoremap <silent> <leader>w :write<CR>
nnoremap <silent> <leader>W :SudoWrite<CR>

" shortcuts for moving around split windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" shortcuts for opening new split windows
nnoremap <silent> <leader>h :split<CR><C-w><C-w>
nnoremap <silent> <leader>v :vsplit<CR><C-w><C-w>
nnoremap <silent> <leader>q :q<CR>
nnoremap <silent> <leader>Q :q!<CR>

" map Y to yank until EOL
nnoremap Y y$

" F7 to toggle between 'paste' and 'nopaste' in insert mode
set pastetoggle=<F7>

" F8 to toggle line numbers and git-gutter
nnoremap <silent> <F8> :set nonumber!<CR>:GitGutterToggle<CR>

" F9 to Toggle list (display unprintable characters)
nnoremap <silent> <F9> :set list!<CR>

" F10 to Toggle highlighting the current line and column.
nnoremap <silent> <F10> :set cursorline!<CR>:set cursorcolumn!<CR>

" GitGutter Settings
let g:gitgutter_map_keys = 0

" Fix gutter background color
highlight! link SignColumn LineNr
autocmd ColorScheme * highlight! link SignColumn LineNr

" CtrlP Settings
let g:ctrlp_custom_ignore = 'tags'

" use a dark background
set background=dark

" set the colorscheme jellybeans
colorscheme jellybeans

" override jellybeans vimdiff colors
hi DiffAdd      ctermfg=darkgreen
hi DiffChange   ctermfg=yellow
hi DiffDelete   ctermfg=darkred

" make the GUI nice
if has('gui_running')
  " turn off the menu, tool, and scroll bar
  set guioptions-=m
  set guioptions-=T
  set guioptions-=L
  set guioptions-=l
  set guioptions-=r
  set guioptions-=R

  " increase the starting size of the editor
  set lines=50
  set columns=140

  " default to line and column highlighting
  set cursorline cursorcolumn

  " set up some decent fonts
  if has("gui_win32")
    set guifont=Consolas:h10:cANSI
  elseif has("gui_macvim")
    set guifont=Source\ Code\ Pro:h14
  endif
endif

" if tmux or screen is being used, default to 256 colors
if &term == "screen"
  set t_Co=256
end

" airline symbol compatibility
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.linenr = ' '
let g:airline_symbols.maxlinenr = ': '
let g:airline_symbols.paste = 'PASTE'
let g:airline_symbols.notexists = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.colnr = ''

" add jbuilder syntax highlighting
au BufNewFile,BufRead *.json.jbuilder set ft=ruby

" asynchronous lint engine (ale)
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:airline#extensions#ale#enabled = 1
let g:ale_virtualtext_cursor = 0
let g:ale_linters = { 'eruby': ['erubi'] }

" snipMate
let g:snipMate = { 'snippet_version' : 1 }

" smoother gitgutter
set updatetime=300

" coc
" use tab/shift+tab to navigate the autocomplete menu
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" use ctrl+j/k to navigate the autocomplete menu
" TODO: stop vim from eating these commands sometimes
" inoremap <silent><expr> <C-j> coc#pum#visible() ? coc#pum#next(1) : "\<C-j>"
" inoremap <silent><expr> <C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-k>"

" use ctrl+space to manually bring up the menu
inoremap <silent><expr> <c-@> coc#refresh()

" use enter to confirm the autocompletion
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nnoremap <silent> K :call ShowDocumentation()<CR>

" only enable coc for whitelisted filetypes
function! s:enable_coc_for_type()
  let l:filesuffix_whitelist = ['jsx']

  if index(l:filesuffix_whitelist, expand('%:e')) == -1
    let b:coc_enabled = 0
  endif
endfunction

autocmd BufRead,BufNewFile * call s:enable_coc_for_type()

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" load a personal vimrc if one exists
let s:personalrc = expand($HOME . '/.personal.vimrc')
if filereadable(s:personalrc)
  exec ':so ' . s:personalrc
endif
